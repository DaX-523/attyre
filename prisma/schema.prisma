// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  S
  M
  L
  XL
}

enum Color {
  RED
  BLUE
  GREEN
}

model User {
  id               Int      @id 
  username         String   @unique
  display_name     String
  profile_picture_url String?
  bio              String?
  followers_count  Int      @default(0)
  verified         Boolean  @default(false)
  videos           Video[]
  created_at       DateTime @default(now())
}



model Product {
  id               Int      @id 
  name             String
  price            Float
  original_price   Float?
  discount_percentage Int?
  image_url        String
  timestamp        Int
  in_stock         Boolean  @default(true)
  currency         String   @default("USD")
  store_id         Int?     
  store            Store?   @relation(fields: [store_id], references: [id])
  variants         Variant[]
  videos           VideoProduct[]
}

model Variant {
  id               Int      @id 
  product_id       Int
  name             String
  size_options     Size[]
  color_options    Color[]
  product          Product  @relation(fields: [product_id], references: [id])
}

model Video {
  id               Int      @id 
  video_url        String
  thumbnail_url    String?
  description      String?
  view_count       Int      @default(0)
  duration         Int
  user_id          Int      
  likes_count      Int      @default(0)
  comments_count   Int      @default(0)
  shares_count     Int      @default(0)
  is_liked         Boolean  @default(false)
  is_bookmarked    Boolean  @default(false)
  created_at       DateTime @default(now())
  music_id         Int?     

  user             User     @relation(fields: [user_id], references: [id])
  products         VideoProduct[]
  music            Music?   @relation(fields: [music_id], references: [id])
  hashtags         String[] 
}

model VideoProduct {
  video_id         Int
  product_id       Int

  video            Video    @relation(fields: [video_id], references: [id])
  product          Product  @relation(fields: [product_id], references: [id])

  @@id([video_id, product_id])  // Composite primary key
}

model Music {
  id               Int      @id 
  name             String
  artist           String
  cover_url        String?
  videos           Video[]
}

model Store {
  id        Int     @id 
  name      String
  logo_url  String?
  products  Product[] 
}
